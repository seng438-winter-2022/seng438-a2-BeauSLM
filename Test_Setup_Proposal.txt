Based on the chosen tests and test development plan, these are the following proposed
test cases. The boundaries for max and min must be discussed in greater detail.

**getLowerBound() Tests: **

-testLowestBound: 
	- setup exampleRange = new Range( Double.longBitsToDouble(0x1L), 0)
	- getLowerBound()
	- ensure that the returned value equals Double.longBitsToDouble(0x1L)

-testHighestBound:
	- setup exampleRange = new 
	Range( Double.longBitsToDouble(0x7fefffffffffffffL), Double.longBitsToDouble(0x7fefffffffffffffL))
	- getLowerBound()	
	- ensure that the result equals  Double.longBitsToDouble(0x7fefffffffffffffL). 

-testMedianValue:
	- setup exampleRange = new Range(0, 1)
	- getLowerBound()
	- ensure the return value equals 0. 





**getUpperBound() Tests: **

-testLowestBound: 
	- setup exampleRange = new 
		Range( Double.longBitsToDouble(0x1L), Double.longBitsToDouble(0x1L))
	- getUpperBound()
	- ensure that the returned value equals Double.longBitsToDouble(0x1L)

-testHighestBound:
	- setup exampleRange = new 
		Range( 0, Double.longBitsToDouble(0x7fefffffffffffffL))
	- getUpperBound()	
	- ensure that the result equals  Double.longBitsToDouble(0x7fefffffffffffffL). 

-testMedianValue:
	- setup exampleRange = new Range(-1, 0)
	- getUpperBound()
	- ensure the return value equals 0. 



**getLength() Tests: **

-testSmallestLength:
	-setup exampleRange = new Range(0,0)
	-getLength()
	-ensure return value is 0. 

-testLargestImpossibleLength:
	-setup exampleRange = new 
		Range(Double.longBitsToDouble(0x1L), Double.longBitsToDouble(0x7fefffffffffffffL)
	-getLength()
	-ensure the return value is Double.longBitsToDouble(0x7fefffffffffffffL)x2
		This test should fail, as the length is larger than a double can be.
 
-testLargestPossibleLength:
	-setup exampleRange = new 
		Range(0, Double.longBitsToDouble(0x7fefffffffffffffL)
	-getLength()
	-ensure the return value is Double.longBitsToDouble(0x7fefffffffffffffL)
 

-testMedianLength:
	-setup exampleRange = new Range(-100, 100)
	-getLength()
	-ensure result is equal to 200.

- shift(Range baase, double delta) tests :
 
	- pass null Range to the function
		Must return illegal argument exception
	- pass 0 delta
		It shouldn't shift the range
	- pass negative delta
		It should shift the lower and upper bound of range left wise by absolute value of delta
	- pass positive delta, 
		it should shift the lower and upper bound of the range right wise

- toString() :
	create a new Range object, and test if the function toString returns a function that has 
	the form of : Range[lower,upper]

- equal(double[][] a, double[][] b) tests:
	- pass arrays that are equal
		Result should be True
	- pass arrays that are not equal
		Result should be False
	- pass arrays that are both null
		Result should be True
	- pass one array that is null and one that isn't.
		Result should be False
	